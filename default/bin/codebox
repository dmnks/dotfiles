#!/bin/bash

PROGNAME="codebox"

usage() {
    echo "\
Usage: $PROGNAME COMMAND [ARGS]

Simple development environment within the current directory (a "project").

Quick start:
  $ $PROGNAME edit
  $ $PROGNAME build
  $ $PROGNAME create
  $ $PROGNAME enter

Commands:
    build       build a box image
    commit      update the box image
    edit        edit (or create) the Dockerfile
    create      create a new box
    enter       attach to the box
    ls          list all boxes (per branch)
    rm          remove the box"
    exit 1
}

CONFDIR="$HOME/.config/$PROGNAME"
PROJECT="$(basename $PWD)"
PREFIX="$PROGNAME-$PROJECT"
BRANCH="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2>/dev/null)"
[ -z "$BRANCH" ] && BRANCH=master
[ -n "$CODEBOX_BRANCH" ] && BRANCH="$CODEBOX_BRANCH"
IMAGE="$PREFIX:$BRANCH"
NAME="$PREFIX-$BRANCH"
IMAGEDIR="$CONFDIR/images/$PROJECT"
TEMPLATE="$IMAGEDIR/master/Dockerfile"
DOCKERFILE="$IMAGEDIR/$BRANCH/Dockerfile"
mkdir -p $IMAGEDIR/{master,$BRANCH}
[[ ! -f "$DOCKERFILE" && -f "$TEMPLATE" ]] && cp $TEMPLATE $DOCKERFILE

ensure_box_exists() {
    if ! podman container exists $NAME; then
        >&2 echo "No box has been created here yet."
        >&2 echo "Use: $PROGNAME create"
        exit 1
    fi
}

ensure_no_box_exists() {
    if podman container exists $NAME; then
        >&2 echo "Box already exists here."
        >&2 echo "Use: $PROGNAME enter"
        exit 1
    fi
}

ensure_image_exists() {
    if ! podman image exists $IMAGE; then
        >&2 echo "No image exists here."
        >&2 echo "Use: $PROGNAME build"
        exit 1
    fi
}

CMD=$1
shift
ARGS=$@
if [ -z "$CMD" ]; then
    usage
elif [ "$CMD" == "build" ]; then
    if [ ! -f "$DOCKERFILE" ]; then
        >&2 echo "No Dockerfile defined here."
        >&2 echo "Create one with: codebox edit"
        exit 1
    fi
    podman build $ARGS --build-arg=MOUNTDIR=$PWD -t $IMAGE -f $DOCKERFILE .
elif [ "$CMD" == "commit" ]; then
    podman commit $NAME $IMAGE
elif [ "$CMD" == "edit" ]; then
    $EDITOR $DOCKERFILE
elif [ "$CMD" == "create" ]; then
    ensure_no_box_exists
    ensure_image_exists
    podman create \
         -e TERM -it \
         -v=$PWD:$PWD \
         -v=$HOME/.bashrc:/root/.bashrc:ro \
         --workdir $PWD \
         --name $NAME \
         --hostname $PROGNAME \
         --network host \
         $ARGS \
         -it $IMAGE >/dev/null
    chcon -R -t container_file_t $PWD
    chcon -t container_file_t $HOME/.bashrc
    echo "Box created."
    echo "Enter with: $PROGNAME enter"
elif [ "$CMD" == "enter" ]; then
    ensure_box_exists
    podman start $NAME >/dev/null
    podman attach --detach-keys="ctrl-@" $NAME
elif [ "$CMD" == "ls" ]; then
    for name in $(podman ps -a --format '{{.Names}}'); do
        symbol="  "
        color=""
        [[ "$name" =~ ^$PREFIX ]] || continue
        if [[ "$name" == "$NAME" ]]; then
            symbol="* "
            color=$(tput setaf 2)
        fi
        name=$(echo "$name" | sed "s/$PREFIX-//")
        echo "$symbol$color$name$(tput sgr0)"
    done
elif [ "$CMD" == "rm" ]; then
    ensure_box_exists
    podman rm -f $NAME >/dev/null
elif [ "$CMD" == "mc" ]; then
    ensure_box_exists
    podman unshare mc -d $(podman unshare podman mount $NAME)
else
    usage
fi

exit 0
