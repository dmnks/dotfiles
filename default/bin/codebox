#!/bin/bash

PROGNAME="codebox"

usage() {
    echo "\
Usage: $PROGNAME COMMAND [ARGS]

Isolated development environment within the current directory (a \"project\")
using Podman containers (\"boxes\"), with lightweight host integration and
simple branching support.

Quick start:
    $ $PROGNAME define
    $ $PROGNAME build
    $ $PROGNAME create
    $ $PROGNAME enter

Commands:
    define          create (or edit) the Dockerfile
    build [ARGS]    build an image (passes ARGS to \"podman build\")
    create [ARGS]   create a new box (passes ARGS to \"podman create\")
    enter           attach to the box
    branch [--del]  clone the box template (Dockerfile, config file and share
                    directory on CODEBOX_BASE) for the current git branch
    commit          update the image
    ls              list all boxes in this project (per branch)
    config [--del] [KEY] [VALUE]
                    set KEY (in the form section.param) to VALUE for the box
                    (no KEY launches editor, no VALUE prints current)
    share           launch a shell inside the box share directory
    mc              browse the box filesystem with Midnight Commander
    rm              delete the box

Environment:
    CODEBOX_BRANCH  overrides the current git branch
    CODEBOX_BASE    fall-back branch to use if the box has not been branched
                    for the current git branch (defaults to \"master\")"
    exit 1
}

CONFDIR="$HOME/.config/$PROGNAME"
PROJECT="$(basename $PWD)"
PROJDIR="$CONFDIR/projects/$PROJECT"
mkdir -p $PROJDIR
GITBRANCH="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2>/dev/null)"
[ -n "$CODEBOX_BRANCH" ] && GITBRANCH=$CODEBOX_BRANCH
[ -z "$CODEBOX_BASE" ] && CODEBOX_BASE=master
BRANCH=$GITBRANCH
[[ -z "$BRANCH" || ! -d "$PROJDIR/$BRANCH" ]] && BRANCH=$CODEBOX_BASE
BOXDIR="$PROJDIR/$BRANCH"
mkdir -p $BOXDIR/share
CONFILE="$BOXDIR/config"
DOCKERFILE="$BOXDIR/Dockerfile"
PREFIX="$PROGNAME-$PROJECT"
IMAGE="$PREFIX:$BRANCH"
NAME="$PREFIX-$BRANCH"

parse_key() {
    echo $@ | sed 's/\./ /'
}

conf_get() {
    crudini --get $CONFILE $(parse_key $@)
}

conf_set() {
    crudini --set $CONFILE $(parse_key $@)
}

conf_del() {
    crudini --del $CONFILE $(parse_key $@)
}

ensure_box_exists() {
    if ! podman container exists $NAME; then
        >&2 echo "No box has been created here yet."
        >&2 echo "Use: $PROGNAME create"
        exit 1
    fi
}

ensure_no_box_exists() {
    if podman container exists $NAME; then
        >&2 echo "Box already exists here."
        >&2 echo "Use: $PROGNAME enter"
        exit 1
    fi
}

ensure_image_exists() {
    if ! podman image exists $IMAGE; then
        >&2 echo "No image exists here."
        >&2 echo "Use: $PROGNAME build"
        exit 1
    fi
}

CMD=$1
shift
ARGS=$@
if [ -z "$CMD" ]; then
    usage
elif [ "$CMD" == "build" ]; then
    if [ ! -f "$DOCKERFILE" ]; then
        >&2 echo "No Dockerfile defined here."
        >&2 echo "Create one with: $PROGNAME define"
        exit 1
    fi
    podman build \
        $ARGS $(conf_get build.args 2>/dev/null) \
        --build-arg=MOUNTDIR=$PWD \
        -t $IMAGE \
        -f $DOCKERFILE .
elif [ "$CMD" == "commit" ]; then
    podman commit $NAME $IMAGE
elif [ "$CMD" == "define" ]; then
    $EDITOR $DOCKERFILE
elif [ "$CMD" == "create" ]; then
    ensure_no_box_exists
    ensure_image_exists
    podman create \
        -e TERM -it \
        -v=$PWD:$PWD \
        -v=$BOXDIR/share:/share \
        -v=$HOME/.bashrc:/root/.bashrc:ro \
        --workdir $PWD \
        --name $NAME \
        --hostname $PROGNAME \
        --network host \
        $ARGS $(conf_get create.args 2>/dev/null) \
        -it $IMAGE >/dev/null
    chcon -R -t container_file_t $PWD
    chcon -R -t container_file_t $BOXDIR/share
    chcon -t container_file_t $HOME/.bashrc
    echo "Box created."
    echo "Enter with: $PROGNAME enter"
elif [ "$CMD" == "enter" ]; then
    ensure_box_exists
    podman start $NAME >/dev/null
    podman attach --detach-keys="ctrl-@" $NAME
elif [ "$CMD" == "branch" ]; then
    target="$PROJDIR/$GITBRANCH"
    if [ "$1" == "--del" ]; then
        rm -rf "$target"
    elif [ -d "$target" ]; then
        >&2 echo "Already branched."
        exit 1
    else
        mkdir -p $target
        cp -r $BOXDIR/* $target/
    fi
elif [ "$CMD" == "ls" ]; then
    for name in $(podman ps -a --format '{{.Names}}' | sort); do
        symbol="  "
        color=""
        [[ "$name" =~ ^$PREFIX ]] || continue
        if [[ "$name" == "$NAME" ]]; then
            symbol="* "
            color=$(tput setaf 2)
        fi
        name=$(echo "$name" | sed "s/$PREFIX-//")
        echo "$symbol$color$name$(tput sgr0)"
    done
elif [ "$CMD" == "rm" ]; then
    ensure_box_exists
    podman rm -f $NAME >/dev/null
elif [ "$CMD" == "mc" ]; then
    if ! command -v mc >/dev/null 2>&1; then
        >&2 echo "Midnight Commander not installed."
        exit 1
    fi
    ensure_box_exists
    podman unshare mc -d $(podman unshare podman mount $NAME)
elif [ "$CMD" == "share" ]; then
    sh -c "cd $BOXDIR/share; exec '${SHELL:-sh}'"
elif [ "$CMD" == "config" ]; then
    delete=false
    if [ "$1" == "--del" ]; then
        delete=true
        shift
    fi
    key=$1
    val=$2
    if [ -z "$key" ]; then
        $EDITOR $CONFILE
    elif $delete; then
        conf_del $key
    elif [ -z "$val" ]; then
        conf_get $key
    else
        conf_set $key $val
    fi
else
    usage
fi

exit 0
