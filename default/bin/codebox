#!/bin/bash

PROGNAME="codebox"

usage() {
    echo "\
Usage: $PROGNAME COMMAND [ARGS]

Isolated development environment within the current directory.

A simple wrapper around Podman to seamlessly manage a development environment
(a \"box\") for your project.  If the directory is a git repo, there is one box
per branch.

Some of the commands accept arguments for the corresponding Podman command (for
example, \"$PROGNAME build\" passes any arguments down to \"podman build\").

Quick start:
  $ $PROGNAME define
  $ $PROGNAME build
  $ $PROGNAME create
  $ $PROGNAME enter

Commands:
    define      create (or edit) the Dockerfile
    build       build a box image
    create      create a new box
    enter       attach to the box
    commit      update the box image
    ls          list all branches with a box
    config [--unset] [OPTION] [VALUE]
                set OPTION to VALUE
                (no VALUE prints current, no OPTION prints available)
    mc          browse the box with Midnight Commander
    rm          remove the box"
    exit 1
}

CONFDIR="$HOME/.config/$PROGNAME"
PROJECT="$(basename $PWD)"
PREFIX="$PROGNAME-$PROJECT"
BRANCH="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2>/dev/null)"
[ -z "$BRANCH" ] && BRANCH=master
[ -n "$CODEBOX_BRANCH" ] && BRANCH="$CODEBOX_BRANCH"
IMAGE="$PREFIX:$BRANCH"
NAME="$PREFIX-$BRANCH"
TEMPLATE="$CONFDIR/projects/$PROJECT/master"
PROJDIR="$CONFDIR/projects/$PROJECT/$BRANCH"
DOCKERFILE="$PROJDIR/Dockerfile"
if [[ ! -d "$PROJDIR" && -d "$TEMPLATE" ]]; then
    cp -r $TEMPLATE $PROJDIR
else
    mkdir -p $PROJDIR/{build,create}
    touch $PROJDIR/{build,create}/args
fi

ensure_box_exists() {
    if ! podman container exists $NAME; then
        >&2 echo "No box has been created here yet."
        >&2 echo "Use: $PROGNAME create"
        exit 1
    fi
}

ensure_no_box_exists() {
    if podman container exists $NAME; then
        >&2 echo "Box already exists here."
        >&2 echo "Use: $PROGNAME enter"
        exit 1
    fi
}

ensure_image_exists() {
    if ! podman image exists $IMAGE; then
        >&2 echo "No image exists here."
        >&2 echo "Use: $PROGNAME build"
        exit 1
    fi
}

CMD=$1
shift
ARGS=$@
if [ -z "$CMD" ]; then
    usage
elif [ "$CMD" == "build" ]; then
    if [ ! -f "$DOCKERFILE" ]; then
        >&2 echo "No Dockerfile defined here."
        >&2 echo "Create one with: codebox define"
        exit 1
    fi
    ARGS="$ARGS $(cat $PROJDIR/build/args)"
    podman build $ARGS --build-arg=MOUNTDIR=$PWD -t $IMAGE -f $DOCKERFILE .
elif [ "$CMD" == "commit" ]; then
    podman commit $NAME $IMAGE
elif [ "$CMD" == "define" ]; then
    $EDITOR $DOCKERFILE
elif [ "$CMD" == "create" ]; then
    ensure_no_box_exists
    ensure_image_exists
    ARGS="$ARGS $(cat $PROJDIR/create/args)"
    podman create \
         -e TERM -it \
         -v=$PWD:$PWD \
         -v=$HOME/.bashrc:/root/.bashrc:ro \
         --workdir $PWD \
         --name $NAME \
         --hostname $PROGNAME \
         --network host \
         $ARGS \
         -it $IMAGE >/dev/null
    chcon -R -t container_file_t $PWD
    chcon -t container_file_t $HOME/.bashrc
    echo "Box created."
    echo "Enter with: $PROGNAME enter"
elif [ "$CMD" == "enter" ]; then
    ensure_box_exists
    podman start $NAME >/dev/null
    podman attach --detach-keys="ctrl-@" $NAME
elif [ "$CMD" == "ls" ]; then
    for name in $(podman ps -a --format '{{.Names}}' | sort); do
        symbol="  "
        color=""
        [[ "$name" =~ ^$PREFIX ]] || continue
        if [[ "$name" == "$NAME" ]]; then
            symbol="* "
            color=$(tput setaf 2)
        fi
        name=$(echo "$name" | sed "s/$PREFIX-//")
        echo "$symbol$color$name$(tput sgr0)"
    done
elif [ "$CMD" == "rm" ]; then
    ensure_box_exists
    podman rm -f $NAME >/dev/null
elif [ "$CMD" == "mc" ]; then
    if ! command -v mc >/dev/null 2>&1; then
        >&2 echo "Midnight Commander not installed."
        exit 1
    fi
    ensure_box_exists
    podman unshare mc -d $(podman unshare podman mount $NAME)
elif [ "$CMD" == "config" ]; then
    delete=false
    if [ "$1" == "--unset" ]; then
        delete=true
        shift
    fi
    key=$1
    val=$2
    if [ -z "$key" ]; then
        find $PROJDIR -type f ! -name "Dockerfile" -printf "%P\n"
        exit 0
    fi
    path="$PROJDIR/$key"
    if [ ! -f "$path" ]; then
        >&2 echo "No such key"
        exit 1
    fi
    if $delete; then
        rm $path
        exit 0
    fi
    if [ -z "$val" ]; then
        cat $path
        exit 0
    fi
    echo $val > $path
else
    usage
fi

exit 0
