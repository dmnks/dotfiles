#!/bin/bash

PROGNAME="codebox"

usage() {
    echo "\
Usage: $PROGNAME COMMAND [ARGS]

Isolated development environment within \$PWD (a \"project\") using a Podman
container (a \"box\"), with lightweight host integration and simple branching
support.

Configuration (in Dockerfile):
    LABEL {build,create}.args=ARGS
                    passes ARGS to the build or create command, respectively

Quick start:
    $ $PROGNAME edit
    $ $PROGNAME build
    $ $PROGNAME create
    $ $PROGNAME enter

Commands:
    edit            edit (or create) the Dockerfile
    build [ARGS]    build an image (passes ARGS to \"podman build\")
    create [ARGS]   create a new box (passes ARGS to \"podman create\")
    enter           attach to the box
    branch [rm]     clone the master Dockerfile for the current git branch
                    (or remove)
    commit          save changes made to the image
    ls              list all boxes in this project (per branch)
    mc              browse the box filesystem with Midnight Commander
    config          browse the config directory with Midnight Commander
    pwd             print the config directory path
    git             run git(1) with the given arguments from the config
                    directory
    make            run make(1) in the box
    rm              delete the box

Environment:
    CODEBOX_BRANCH  overrides the current git branch"
    exit 1
}

CONFDIR="$HOME/.config/$PROGNAME"
PROJECT="$(git worktree list | head -n1 | cut -d' ' -f1 | xargs basename)"
[ -z "$PROJECT" ] && PROJECT="$(basename $PWD)"
PROJDIR="$CONFDIR/$PROJECT"
mkdir -p "$PROJDIR"
DOCKERFILE="$PROJDIR/Dockerfile"
BRANCH="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2>/dev/null)"
BRANCH="$(echo "$BRANCH" | sed 's/-v[0-9]\+$//')"
[ -n "$CODEBOX_BRANCH" ] && BRANCH="$CODEBOX_BRANCH"
[ -z "$BRANCH" ] && BRANCH="master"
[ -f "$DOCKERFILE:$BRANCH" ] && DOCKERFILE="$DOCKERFILE:$BRANCH"
PREFIX="$PROGNAME-$PROJECT"
IMAGE="$PREFIX:$BRANCH"
NAME="$PREFIX-$BRANCH"

get_conf() {
    grep "^LABEL $1" $DOCKERFILE | cut -f2 -d'='
}

ensure_box_exists() {
    if ! podman container exists $NAME; then
        >&2 echo "No box has been created here yet."
        >&2 echo "Use: $PROGNAME create"
        exit 1
    fi
}

ensure_no_box_exists() {
    if podman container exists $NAME; then
        >&2 echo "Box already exists here."
        >&2 echo "Use: $PROGNAME enter"
        exit 1
    fi
}

ensure_image_exists() {
    if ! podman image exists $IMAGE; then
        >&2 echo "No image exists here."
        >&2 echo "Use: $PROGNAME build"
        exit 1
    fi
}

CMD=$1
shift
ARGS=$@
if [ -z "$CMD" ]; then
    usage
elif [ "$CMD" == "build" ]; then
    if [ ! -f "$DOCKERFILE" ]; then
        >&2 echo "No Dockerfile defined here."
        >&2 echo "Create one with: $PROGNAME edit"
        exit 1
    fi
    podman build \
        $ARGS $(get_conf build.args) \
        --build-arg=MOUNTDIR=$PWD \
        -t $IMAGE \
        -f $DOCKERFILE $PROJDIR
elif [ "$CMD" == "commit" ]; then
    podman commit $NAME $IMAGE
elif [ "$CMD" == "edit" ]; then
    $EDITOR $DOCKERFILE
elif [ "$CMD" == "create" ]; then
    ensure_no_box_exists
    ensure_image_exists
    podman create \
        -e TERM -it \
        -v=$PWD:$PWD \
        -v=$PROJDIR:/data \
        -v=$HOME/.bashrc:/root/.bashrc:ro \
        -v=$HOME/.tmux.conf:/root/.tmux.conf:ro \
        --workdir $PWD \
        --name $NAME \
        --hostname $PROGNAME \
        $ARGS $(get_conf create.args) \
        -it $IMAGE >/dev/null
    chcon -R -t container_file_t $PWD
    chcon -R -t container_file_t $PROJDIR
    chcon -t container_file_t $HOME/.bashrc
    chcon -t container_file_t $HOME/.tmux.conf
    echo "Box created."
    echo "Enter with: $PROGNAME enter"
elif [ "$CMD" == "enter" ]; then
    ensure_box_exists
    podman start $NAME >/dev/null
    podman attach --detach-keys="ctrl-@" $NAME
elif [ "$CMD" == "branch" ]; then
    target="$PROJDIR/Dockerfile:$BRANCH"
    if [ "$BRANCH" == "master" ]; then
        >&2 echo "On master, nothing to do."
        exit 1
    elif [ -f "$target" ]; then
        if [ "$1" == "rm" ]; then
            rm -i $target
            exit 0
        fi
        >&2 echo "Already branched."
        exit 1
    fi
    cp $PROJDIR/Dockerfile $target
elif [ "$CMD" == "ls" ]; then
    for name in $(podman ps -a --format '{{.Names}}' | sort); do
        symbol="  "
        color=""
        if ! echo $name | grep -q "^$PREFIX-"; then
            continue
        fi
        if [[ "$name" == "$NAME" ]]; then
            symbol="* "
            color=$(tput setaf 2)
        fi
        name=$(echo "$name" | sed "s/$PREFIX-//")
        echo "$symbol$color$name$(tput sgr0)"
    done
elif [ "$CMD" == "rm" ]; then
    ensure_box_exists
    podman rm -f $NAME >/dev/null
elif [ "$CMD" == "mc" ]; then
    ensure_box_exists
    if ! command -v mc >/dev/null 2>&1; then
        >&2 echo "Midnight Commander not installed."
        exit 1
    fi
    podman unshare mc -d $(podman unshare podman mount $NAME)
elif [ "$CMD" == "config" ]; then
    if ! command -v mc >/dev/null 2>&1; then
        >&2 echo "Midnight Commander not installed."
        exit 1
    fi
    mc $PROJDIR
elif [ "$CMD" == "pwd" ]; then
    echo $PROJDIR
elif [ "$CMD" == "git" ]; then
    git -C $PROJDIR $@
elif [ "$CMD" == "make" ]; then
    podman exec -it $NAME make $@
    exit $?
else
    usage
fi

exit 0
