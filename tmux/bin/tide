#!/bin/bash

PROGRAM=$(basename $0)
CMD=$1; shift
REPO=$(dirname $PWD | xargs basename)

source ~/.theme/bashrc

get_conf() {
    awk -F "=" "/$1/ {print \$2}" $HOME/.config/tide/config.ini
}

set_color() {
    [ $# == 0 ] && return
    local hex=${1:1}
    local rgb=$(printf "%d;%d;%d\n" 0x${hex:0:2} 0x${hex:2:2} 0x${hex:4:2})
    printf "\x1b[38;2;${rgb}m"
}

ROOTDIR=$(get_conf rootdir)
C_DIM=$(set_color $THEME_COLOR_DIM1)
C_RES=$(printf "\x1b[0m")

cmd_usage() {
    echo "\
Usage: $PROGRAM COMMAND [ARGS]

A simple tmux(1)-based "IDE" with git-worktree(1) and toolbox(1) integration.

Commands:
    open                select worktree from menu
    status [icon|line]  generate status bar (to use from ~/.tmux.conf)
"
    exit 1
}

list_worktrees() {
    local repo args label path obj ref name branch

    if [ $# -gt 0 ]; then
        repo="$1/"
        args="-C $2"
    else
        repo=
        args=
    fi

    git $args worktree list --porcelain | \
    while read label path; read label obj; read ref; read; do
        name=${repo}$(basename $path)
        if [ "$ref" != "detached" ]; then
            branch=" 󰘬 $(echo $ref | awk '{print $2}' | xargs basename)"
        else
            branch=
        fi
        printf "${name}${C_DIM}${branch}  ${obj:0:10}  ${path}${C_RES}\n"
    done
}

list_repos() {
    local path repo
    find "$ROOTDIR" -maxdepth 3 -name .git -type d -printf '%h\n' | sort | \
    while read path; do
        repo=$(dirname $path | xargs basename)
        list_worktrees $repo $path
    done
}

press_key() {
    echo
    echo -n "Press ENTER to continue"
    read
    clear
    [ "$1" == "-n" ] || exit 1
}

cmd_open() {
    local prompt header line tree path name
    prompt=" Worktree"
    header="Select a worktree to open or switch to (press ALT-A to toggle all)"

    # --bind 'alt-d:execute(tide kill {})+reload(tide reload -r)' \
    line=$(list_worktrees | \
    fzf --prompt "$prompt $REPO/" --ansi +s -n1,3 \
        --header "$header"$'\n\n' \
        --bind 'alt-w:close' \
        --bind "alt-a:transform:[ \${FZF_PROMPT: -1} == '/' ] &&
                echo 'change-prompt($prompt )+reload(tide reload --all)' ||
                echo 'change-prompt($prompt $REPO/)+reload(tide reload)'")

    [ -z "$line" ] && return
    tree=$(echo "$line" | awk '{print $1}')
    path=$(echo "$line" | awk '{print $7}')
    if [[ $tree == */* ]]; then
        name=$tree
    else
        name=$REPO/$tree
    fi
    name=$(echo "$name" | sed 's/\./-/g')
    # if [ ! -d "../$tree" ]; then
    #     git worktree add ../$tree $tree || press_key
    # fi
    cd "$path"

    if ! tmux has-session -t="$name" 2>/dev/null; then
        tmux new-session -ds "$name" -n " Code" \
                         "sleep 0.1; while true; do $EDITOR -c GFiles; done"
        tmux new-window -t "$name" -n "󰘬 Git" "while true; do tig; done"
        tmux split-window -t "$name" -h -d
        tmux new-window -t "$name" -n " Build"
        tmux split-window -t "$name" -h -d
        tmux new-window -t "$name" -n " Debug"
        tmux split-window -t "$name" -h -d
        tmux new-window -t "$name" -n " Manual"
        tmux split-window -t "$name" -h -d
        tmux select-window -t "${name}:+1"
    fi

    if [ -z "$TMUX" ]; then
        tmux attach -t "$name"
    else
        tmux switch-client -t "$name"
    fi
}

list_branches() {
    local fmt_loc fmt_rem fmt_pat
    local symbol ref upstream object

    fmt_loc=(
        "%(if:equals=tag)%(objecttype)%(then)%(else)󰘬%(end)"
        "%(refname:lstrip=-1)"
        "%(if)%(upstream)%(then)%(upstream:short)%(else)%(end)"
        "%(objectname:short=10)"
    )
    fmt_rem="󰘬 %(refname:lstrip=-1) %(refname:short) %(objectname:short=10)"
    fmt_pat="^󰘬 %(refname:lstrip=-1) "

    (git for-each-ref --format="${fmt_loc[*]}" refs/{heads,tags};
     grep -f <(git for-each-ref --format="${fmt_pat}" refs/heads | sort) \
          -v <(git for-each-ref --format="${fmt_rem}" refs/remotes | sort)) | \
    while read symbol ref upstream object; do
        [ $ref == HEAD ] && continue
        if [ -z "$object" ]; then
            object=$upstream
            upstream=
        else
            upstream=" $upstream "
        fi
        printf "${symbol} ${ref} ${C_DIM}${upstream} ${object}${C_RES}\n"
    done
}

cmd_checkout() {
    local header line ref
    header="Select a branch or tag to checkout (press CTRL-R to fetch all)"

    line=$(list_branches | \
    fzf --prompt " Checkout " --ansi +s -n2,4 \
        --header "$header"$'\n\n' \
        --bind 'ctrl-r:reload(tide reload --refs)' \
        --bind 'alt-e:close')

    [ -z "$line" ] && return
    ref=$(echo "$line" | awk '{print $2}')
    upstream=$(echo "$line" | awk '{print $4}')

    if ! git rev-parse --verify $ref 2>&1 >/dev/null; then
        git branch $ref $upstream || press_key
    fi
    git checkout $ref || press_key
    git ctags
    tmux refresh-client
}

cmd_reload() {
    case $1 in
        --refs)
            git fetch --quiet --all
            list_branches
        ;;
        --all)
            list_repos
        ;;
        *)
            list_worktrees
        ;;
    esac
}

cmd_status() {
    local cmd="$1"
    local session_name="$2"
    local session_path="$3"
    local pane_command="$4"

    print_branch() {
        cd "$session_path"
        git rev-parse --is-inside-work-tree >/dev/null || return 0
        source /usr/share/git-core/contrib/completion/git-prompt.sh
        GIT_PS1_SHOWDIRTYSTATE=1
        GIT_PS1_SHOWSTASHSTATE=1
        GIT_PS1_SHOWUPSTREAM="auto"
        GIT_PS1_STATESEPARATOR=""
        printf "󰘬 $(__git_ps1 '%s') "
    }

    print_toolbox() {
        local name=$(echo "$session_name" | sed 's/\//-/')
        podman container exists "$name" || return 0
        local pfx=".Config.Labels"
        local key="{{${pfx}.name}}:{{${pfx}.version}}"
        printf "󰆧 $(podman inspect --format "$key" "$name")  "
    }

    case $cmd in
        icon)
            shift
            case "$1" in
                Code)   echo " " ;;
                Git)    echo "󰘬 " ;;
                Build)  echo " " ;;
                Debug)  echo " " ;;
                Manual) echo " " ;;
                Blame)  echo " " ;;
                Slack)  echo "󰒱 " ;;
                Mutt)   echo "󰇰 " ;;
                Plan)   echo " " ;;
                Dashboard)
                        echo "󰕮 " ;;
                bash)   echo " " ;;
                *)      echo " " ;;
            esac
        ;;
        branch)
            print_branch
        ;;
        line)
            print_toolbox
        ;;
    esac
}

cmd_refresh() {
    tmux set-environment ACCENT_COLOR $(accent_color 2)
    tmux set-environment -g ACCENT_COLOR $(accent_color 2)
    tmux source-file ~/.tmux.conf
    tmux display-message "  Config reloaded"
}

cmd_status() {
    local num=$(git diff --staged --stat | wc -l)
    [ $num == 0 ] && num=2
    num=$(( num + 2 ))
    TIG_SCRIPT=<(echo -e ":${num}\n:enter") tig status
}

case $CMD in
    open)               cmd_open "$@" ;;
    checkout)           cmd_checkout "$@" ;;
    reload)             cmd_reload "$@" ;;
    status)             cmd_status "$@" ;;
    refresh)            cmd_refresh "$@" ;;
    *)                  cmd_usage ;;
esac
