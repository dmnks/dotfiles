#!/bin/bash

PROGRAM=$(basename $0)
CMD=$1; shift
ROOTDIR=$HOME/code
CACHEDIR=$HOME/.cache/tide
WORKTREE_FILE=$HOME/.cache/tide/worktrees

cmd_usage() {
    echo "\
Usage: $PROGRAM COMMAND [ARGS]

A simple tmux(1)-based "IDE" with git-worktree(1) and toolbox(1) integration.

Commands:
    open                select worktree from menu
    status [icon|line]  generate status bar (to use from ~/.tmux.conf)
"
    exit 1
}

worktree_list() {
    local repo
    local tree
    local id
    local main
    local icon
    local color
    local name
    local hint
    local sessions=$(tmux list-sessions -F '#S')

    find "$ROOTDIR" -maxdepth 3 -name ".git" -type d -printf '%h\n' | sort | \
    while read path; do
        dirn=$(dirname $path)
        repo=$(basename $dirn)
        orig=$(basename $path)

        git -C $path worktree list --porcelain | awk '{print $2}' | \
        while read tree; read id; read ref; do
            tree=$(basename "$tree")
            main="  $orig"
            id=$(echo "$id" | head -c10)
            icon=""

            msg=$(git -C $dirn/$tree rev-list --format=%B --max-count=1 \
                      --no-commit-header HEAD | head -n1)

            [ -n "$ref" ] && ref="󰘬 $(basename "$ref") "

            if echo "$sessions" | grep -q "^$repo/$tree\$"; then
                icon=""
                color='#fabd2f'
            elif [ "$tree" == "$orig" ]; then
                color=
                main=
            else
                color=
            fi

            echo "$(set_color $color)$icon $repo/$tree" \
                 "$(set_color '#7c6f64')${ref} $id$main$(reset_color)" \
                 "$(set_color '#665c54')󰦨 $(set_italics)$msg$(reset_color)"
            read
        done

        git -C "$path" branch -v --abbrev=10 | grep -v '^[+\*]' | cut -c3- | \
        while read line; do
            name=$(echo "$line" | awk '{print $1}')
            id=$(echo "$line" | awk '{print $2}')
            msg=$(git -C $path rev-list --format=%B --max-count=1 \
                      --no-commit-header $id | head -n1)
            echo "$(set_color '#83a598')󰫣 $repo/$name" \
                 "$(set_color '#7c6f64') $id  $orig$(reset_color)" \
                 "$(set_color '#665c54')󰦨 $(set_italics)$msg$(reset_color)"
        done
    done
}

set_italics() {
    printf "\x1b[3m"
}

set_color() {
    [ $# == 0 ] && return
    local hex=${1:1}
    local rgb=$(printf "%d;%d;%d\n" 0x${hex:0:2} 0x${hex:2:2} 0x${hex:4:2})
    printf "\x1b[38;2;${rgb}m"
}

reset_color() {
    printf "\x1b[0m"
}

load_worktrees() {
    if [ ! -f $WORKTREE_FILE ]; then
        mkdir -p $CACHEDIR
        worktree_list > $WORKTREE_FILE
    fi
    if [ -z "$WORKTREE_REPO" ]; then
        cat $WORKTREE_FILE
        return
    fi
    cat $WORKTREE_FILE | sed -n "s# $WORKTREE_REPO/# #p"
}

cmd_expire() {
    rm $WORKTREE_FILE
}

cmd_reload() {
    cmd_expire
    load_worktrees
}

cmd_create() {
    local name=$(get_repo "$@")
    clear; echo
    read -p "  Enter worktree name: $(dirname $name)/"
    [ -n "$REPLY" ] || return
    git -C $ROOTDIR/$name worktree add ../$REPLY || press_key
}

cmd_kill() {
    local name=$(get_repo "$@")
    if tmux has-session -t="$name" 2>/dev/null; then
        confirm "Close worktree $name" tmux kill-session -t $name
        return
    fi
    [ -d "$ROOTDIR/$name" ] || return
    confirm "Remove worktree $name" \
    git -C $ROOTDIR/$name worktree remove . || press_key
}

get_repo() {
    local name=$(echo "$@" | awk '{print $2}')
    if [ -n "$WORKTREE_REPO" ]; then
        echo $WORKTREE_REPO/$name
        return
    fi
    echo $name
}

press_key() {
    echo
    echo -n "Press ENTER to continue"
    read
    clear
}

confirm() {
    local prompt=$1; shift
    clear; echo
    read -p "  ${prompt} [y/N]? " -n1 -r
    clear
    if [ $REPLY = y ]; then
        "$@"
        return $?
    fi
}

cmd_open() {
    local prompt
    local repo=$(tmux display -p '#S' | xargs dirname)

    unset WORKTREE_REPO
    if [ "$1" == "-r" ]; then
        if [ -n "$repo" ]; then
            export WORKTREE_REPO=$repo
            prompt=$WORKTREE_REPO/
        fi
        shift
    fi

    local line=$(load_worktrees | fzf \
         --bind 'ctrl-r:reload(tide reload)' \
         --bind 'alt-n:execute(tide create {})+reload(tide reload)' \
         --bind 'alt-d:execute(tide kill {})+reload(tide reload)' \
         --header $'ENTER 󰁔 open/create, ALT-D 󰁔 close/remove, ALT-N 󰁔 create, CTRL-R 󰁔 reload\n\n' \
         +s -n2,4 --ansi --prompt " Worktree $prompt")
    [ -z "$line" ] && return

    line=${line:2}
    repo=${WORKTREE_REPO:-$(echo "$line" | cut -d' ' -f1 | cut -d/ -f1)}
    local tree=$(echo "$line" | cut -d' ' -f1 | cut -d/ -f2)
    local root=$(echo "$line" | cut -d' ' -f5)
    cd $ROOTDIR/$repo

    if [ ! -d "$tree" ]; then
        if ! git -C "$ROOTDIR/$repo/$root" worktree add ../$tree; then
            press_key
            return
        fi
    fi
    cd $tree

    local name=$(echo "$repo/$tree" | sed 's/\./-/g')

    if ! tmux has-session -t="$name" 2>/dev/null; then
        tmux new-session -ds "$name" -n "Code" \
                         -x "$(tput cols)" -y "$(tput lines)" \
                         "sleep 0.1; vim -c GFiles"
        tmux new-window -t "$name" -n "Git" "tig"
        tmux split-window -t "$name" -l12 -d
        tmux new-window -t "$name" -n "Build"
        tmux new-window -t "$name" -n "Debug"
        tmux split-window -t "$name" -l12 -d
        tmux new-window -t "$name" -n "Manual"
        tmux split-window -t "$name" -l71 -h "vim ~/plan/${tree}.plan"
        tmux set-option remain-on-exit
        tmux select-window -t ${name}:+1
        cmd_expire
    fi

    if [ -z "$TMUX" ]; then
        tmux attach -t "$name"
    else
        tmux switch-client -t "$name"
    fi
}

cmd_status() {
    local cmd="$1"
    local session_name="$2"
    local session_path="$3"
    local pane_command="$4"

    print_branch() {
        cd "$session_path"
        git rev-parse --is-inside-work-tree >/dev/null || return 0
        printf "#[fg=#83a598]󰘬 $(git rev-parse --abbrev-ref HEAD)#[default]  "
    }

    print_repo() {
        cd "$session_path"
        git rev-parse --is-inside-work-tree >/dev/null || return 0
        printf " $(git rev-parse --path-format=absolute --git-common-dir | \
                    xargs dirname | xargs basename)  "
    }

    print_toolbox() {
        [ "$pane_command" == "toolbox" ] || return 0
        printf "#[fg=#d3869b]󰆧#[default]  "
    }

    case $cmd in
        icon)
            shift
            case "$1" in
                Code)   echo " " ;;
                Git)    echo "󰘬 " ;;
                Build)  echo " " ;;
                Debug)  echo " " ;;
                Manual) echo " " ;;
                Blame)  echo " " ;;
                Slack)  echo "󰒱 " ;;
                Mutt)   echo "󰇰 " ;;
                Plan)   echo " " ;;
                bash)   echo " " ;;
                *)      echo " " ;;
            esac
        ;;
        line)
            print_toolbox
            print_branch
            print_repo
        ;;
    esac
}

case $CMD in
    open)               cmd_open "$@" ;;
    reload)             cmd_reload "$@" ;;
    expire)             cmd_expire "$@" ;;
    create)             cmd_create "$@" ;;
    kill)               cmd_kill "$@" ;;
    status)             cmd_status "$@" ;;
    *)                  cmd_usage ;;
esac
