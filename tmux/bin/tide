#!/bin/bash

PROGRAM=$(basename $0)
CMD=$1; shift
ROOTDIR=$HOME/code

cmd_usage() {
    echo "\
Usage: $PROGRAM COMMAND [ARGS]

A simple tmux(1)-based "IDE" with git-worktree(1) and toolbox(1) integration.

Commands:
    open                select worktree from menu
    status [icon|line]  generate status bar (to use from ~/.tmux.conf)
"
    exit 1
}

worktree_list() {
    local dir
    find "$ROOTDIR" -name ".git" -type d -exec dirname {} \; | \
    while read repo; do
        dir=$(dirname "$repo")
        git -C "$repo" worktree list --porcelain | grep ^worktree
        git -C "$repo" branch --format="branch $dir/%(refname:short)"
    done
}

session_list() {
    local type
    local name
    local forg
    local icon
    local todo
    local sessions=$(tmux list-sessions -F '#S')

    worktree_list | sort -k2 -u | \
    while read path; do
        type=$(echo "$path" | cut -d' ' -f1)
        name=$(echo "$path" | cut -d' ' -f2)
        name=$(echo "$name" | sed "s,$ROOTDIR/,,")
        forg=$(echo "$name" | cut -d/ -f1)
        name=$(echo "$name" | cut -d/ -f2-)
        snam=$(echo "$name" | sed 's/\./-/g')
        case "$forg" in
            github) icon="" ;;
            gitlab) icon="" ;;
            fedora) icon="" ;;
            centos) icon="" ;;
            redhat) icon="" ;;
            *)      icon=" " ;;
        esac
        forg="$icon $forg"
        if echo "$sessions" | grep -q "$snam"; then
            todo=' open'
        elif [ "$type" == "branch" ]; then
            todo=' add'
        else
            todo=' load'
        fi
        printf "%-50s %-12s %s\n" "$name" "$forg" "$todo"
    done
}

cmd_open() {
    local line=$(session_list | fzf --prompt "worktree> " --padding 0,1)
    [ -z "$line" ] && return

    local path=$(echo "$line" | awk '{ print $1 }' | sed "s,$ROOTDIR/,,")
    local frge=$(echo "$line" | awk '{ print $3 }')
    local repo=$(echo "$path" | cut -d/ -f1)
    local tree=$(echo "$path" | cut -d/ -f2)
    local name=$(echo "$repo/$tree" | sed 's/\./-/g')

    cd $ROOTDIR/$frge/$repo
    if [ ! -d "$tree" ]; then
        if ! git -C "$(ls -1 | head -1)" worktree add ../$tree; then
            echo
            echo -n "Press ENTER to close"
            read
            return
        fi
    fi
    cd $tree

    if ! tmux has-session -t "$name" 2>/dev/null; then
        tmux new-session -ds "$name" -n "code" \
                         -x "$(tput cols)" -y "$(tput lines)" \
                         "sleep 0.1; vim -c GFiles"
        tmux new-window -t "$name" -n "git" "tig"
        tmux split-window -t "$name" -l12 -d
        tmux new-window -t "$name" -n "build"
        tmux new-window -t "$name" -n "debug"
        tmux split-window -t "$name" -l12 -d
        tmux new-window -t "$name" -n "man"
        tmux split-window -t "$name" -h -d
        tmux select-window -t ${name}:+1
    fi

    if [ -z "$TMUX" ]; then
        tmux attach -t "$name"
    else
        tmux switch-client -t "$name"
    fi
}

cmd_status() {
    local cmd="$1"
    local session_name="$2"
    local session_path="$3"
    local pane_command="$4"

    print_branch() {
        cd "$session_path"
        git rev-parse --is-inside-work-tree >/dev/null || return 0
        printf "#[fg=#83a598]󰘬 $(git rev-parse --abbrev-ref HEAD)#[default]  "
    }

    print_toolbox() {
        [ "$pane_command" == "toolbox" ] || return 0
        printf "#[fg=#d3869b]󰆧#[default]  "
    }

    case $cmd in
        icon)
            shift
            case "$1" in
                code)   echo " " ;;
                git)    echo "󰘬 " ;;
                build)  echo " " ;;
                debug)  echo " " ;;
                bash)   echo " " ;;
                slack)  echo "󰒱 " ;;
                mutt)   echo "󰇰 " ;;
                plan)   echo " " ;;
                man)    echo " " ;;
                blame)  echo " " ;;
                *)      echo "" ;;
            esac
        ;;
        line)
            print_toolbox
            print_branch
        ;;
    esac
}

case $CMD in
    open)               cmd_open "$@" ;;
    status)             cmd_status "$@" ;;
    *)                  cmd_usage ;;
esac
