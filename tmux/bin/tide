#!/bin/bash

PROGRAM=$(basename $0)
CMD=$1; shift
ROOTDIR=$HOME/code
PROJECT=$(dirname $PWD | xargs basename)

cmd_usage() {
    echo "\
Usage: $PROGRAM COMMAND [ARGS]

A simple tmux(1)-based "IDE" with git-worktree(1) and toolbox(1) integration.

Commands:
    open [-s]           open project in current directory
                        (-s to select git worktree from menu)
    status [icon|line]  generate status bar (to use from ~/.tmux.conf)
"
    exit 1
}

session_list() {
    local name
    local suffix
    local sessions=$(tmux list-sessions -F '#S')

    find "$ROOTDIR" -mindepth 2 -maxdepth 2 -type d | sort | \
    while read path; do
        git -C "$path" rev-parse --is-inside-work-tree &>/dev/null || continue
        name=$(echo "$path" | sed "s,$ROOTDIR/,,")
        suffix=' open'
        echo "$sessions" | grep -q $name && suffix=' goto'
        printf "%-30s 󰘬 %-30s %s\n" \
            "$name" "$(git -C $path rev-parse --abbrev-ref HEAD)" "$suffix"
    done
}

cmd_open() {
    local cmd=$1
    local size

    if [ "$cmd" == "-s" ]; then
        path=$(session_list | \
               fzf --prompt "worktree> " --padding 0,1 --print-query | \
               cut -d' ' -f1)
        [ -z "$path" ] && return
        cd $ROOTDIR
        path=$(echo "$path" | tail -n1)
        case "$path" in
            /f/*)
                repo="$(basename $path)"
                mkdir -p fedora
                cd fedora
                if ! fedpkg clone $repo; then
                    read
                    return
                fi
                cd $repo
            ;;
            *)  cd $path ;;
        esac
        tide open
        return
    fi

    [ $# == 0 ] && set -- $PROJECT/$(basename $PWD)

    if [ -z "$TMUX" ]; then
        size=12
    else
        size=11
    fi

    if ! tmux has-session -t "$1" 2>/dev/null; then
        tmux new-session -ds "$1" -n "code" \
                         -x "$(tput cols)" -y "$(tput lines)" \
                         "sleep 0.1; vim -c GFiles"
        tmux new-window -t "$1" -n "git" "tig"
        tmux split-window -t "$1" -l$size -d
        tmux new-window -t "$1" -n "build"
        tmux new-window -t "$1" -n "debug"
        tmux split-window -t "$1" -l$size -d
        tmux new-window -t "$1" -n "man"
        tmux split-window -t "$1" -h -d
        tmux select-window -t ${1}:+1
    fi

    if [ -z "$TMUX" ]; then
        tmux attach -t "$1"
    else
        tmux switch-client -t "$1"
    fi
}

cmd_status() {
    local cmd="$1"
    local session_name="$2"
    local session_path="$3"
    local pane_command="$4"

    print_branch() {
        cd "$session_path"
        git rev-parse --is-inside-work-tree >/dev/null || return 0
        printf "#[fg=#83a598]󰘬 $(git rev-parse --abbrev-ref HEAD)#[default]  "
    }

    print_toolbox() {
        [ "$pane_command" == "toolbox" ] || return 0
        printf "#[fg=#d3869b]󰆧#[default]  "
    }

    case $cmd in
        icon)
            shift
            case "$1" in
                code)   echo " " ;;
                git)    echo "󰘬 " ;;
                build)  echo " " ;;
                debug)  echo " " ;;
                bash)   echo " " ;;
                slack)  echo "󰒱 " ;;
                mutt)   echo "󰇰 " ;;
                plan)   echo " " ;;
                man)    echo " " ;;
                blame)  echo " " ;;
                *)      echo "" ;;
            esac
        ;;
        line)
            print_toolbox
            print_branch
        ;;
    esac
}

case $CMD in
    open)               cmd_open "$@" ;;
    status)             cmd_status "$@" ;;
    *)                  cmd_usage ;;
esac
